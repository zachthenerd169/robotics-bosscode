//
//  ThreaddedNetwork.h
//  
//
//  Created by Zach Williamson on 11/5/16.
//
//  Implement networking in a thread
//  A seperate thread will constantly be checking for new messages
//  and when they arrive they will be added to a queue that can be checked
//  in the main thread
//

#ifndef ThreaddedNetwork_h
#define ThreaddedNetwork_h

<<<<<<< HEAD
#include "lib/PracticalSocket.h"  // For Socket, ServerSocket, and SocketException
=======
#include "PracticalSocket.h"  // For Socket, ServerSocket, and SocketException
>>>>>>> 00fdf8521056bc9e3d86fcfd9b92f2ad9f465bea
#include <iostream>           // For cerr and cout
#include <string>
#include <cstring>

#include <thread>
<<<<<<< HEAD
#include "utils/ThreadSafeQueue.h"
=======
#include "util/ThreadSafeQueue.h"
>>>>>>> 00fdf8521056bc9e3d86fcfd9b92f2ad9f465bea

#include <vector> 

#define RCVBUFSIZE  50        // Size of receive buffer

class ThreaddedNetwork
{
public:
  /* delete default constructor*/
  ThreaddedNetwork() = delete;

  /* Constructor */
  ThreaddedNetwork(int servPort);

  /* getNewMessages */
  std::vector<std::string> getNewMessages();

<<<<<<< HEAD
  /* hasNewMessages */
  bool hasNewMessages();
=======
>>>>>>> 00fdf8521056bc9e3d86fcfd9b92f2ad9f465bea
  
private:
  TCPServerSocket m_servSock;
  ThreadSafeQueue<std::string> q_new_messages;
  std::thread my_thread;

  /* function to be run in thread */
  void inThreadUpdate();
};

#endif // ThreaddedNetwork_h
